#set( $symbol_pound = '#' )
#set( $symbol_dollar = '$' )
#set( $symbol_escape = '\' )
${symbol_pound}<!--
${symbol_pound}/* Copyright 2002-2004 The Apache Software Foundation
${symbol_pound} *
${symbol_pound} * Licensed under the Apache License, Version 2.0 (the "License");
${symbol_pound} * you may not use this file except in compliance with the License.
${symbol_pound} * You may obtain a copy of the License at
${symbol_pound} *
${symbol_pound} *     http://www.apache.org/licenses/LICENSE-2.0
${symbol_pound} *
${symbol_pound} * Unless required by applicable law or agreed to in writing, software
${symbol_pound} * distributed under the License is distributed on an "AS IS" BASIS,
${symbol_pound} * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
${symbol_pound} * See the License for the specific language governing permissions and
${symbol_pound} * limitations under the License.
${symbol_pound} */
${symbol_pound}-->
${symbol_pound} @version ${symbol_dollar}Id: OJB.properties 365059 2005-10-12 00:06:49Z arminw ${symbol_dollar}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} repository file settings
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The repositoryFile entry tells OJB to use this file as as its standard mapping
${symbol_pound} repository. The file is looked up from the classpath.
${symbol_pound}

${symbol_pound} Kuali Foundation Modification
${symbol_pound}repositoryFile=repository.xml
repositoryFile=OJB-repository.xml
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound} If the useSerializedRepository entry is set to true, OJB tries to load a
${symbol_pound} serialized version of the repository for performance reasons.
${symbol_pound} if set to false, OJB always loads the xml file.
${symbol_pound} Setting this flag to true will accelerate the startup sequence of OJB.
${symbol_pound} If set to true changes to the repository.xml file will only be detected
${symbol_pound} after maually deleting the repository.xml.serialized file.
useSerializedRepository=false
${symbol_pound}
${symbol_pound} If Repository serialization is used the entry serializedRepositoryPath defines the
${symbol_pound} directory where the Repository is written to and read from.
${symbol_pound} this entry is used only when the useSerializedRepository flag is set to true
${symbol_pound}
serializedRepositoryPath=.
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} PersistenceBrokerFactory / PersistenceBroker
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The PersistenceBrokerFactoryClass entry decides which concrete
${symbol_pound} PersistenceBrokerFactory implemention is to be used.

${symbol_pound} Kuali Foundation Modification
${symbol_pound}PersistenceBrokerFactoryClass=org.apache.ojb.broker.core.PersistenceBrokerFactoryDefaultImpl
PersistenceBrokerFactoryClass=org.apache.ojb.broker.core.PersistenceBrokerFactorySyncImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound} If in managed environment *only* the PB-api was used it's recommended to use this factory
${symbol_pound} to enable the PersistenceBroker instances to participate in the JTA transaction. This makes
${symbol_pound} e.g. PBStateListener work properly in managed environments.
${symbol_pound}PersistenceBrokerFactoryClass=org.apache.ojb.broker.core.PersistenceBrokerFactorySyncImpl
${symbol_pound}
${symbol_pound}
${symbol_pound} The PersistenceBrokerClass entry decides which concrete PersistenceBroker
${symbol_pound} implementation is to be served by the PersistenceBrokerFactory.
${symbol_pound} This is the singlevm implementation:
PersistenceBrokerClass=org.apache.ojb.broker.core.PersistenceBrokerImpl
${symbol_pound}
${symbol_pound} This is an implementation that uses Prevayler (prevayler.sf.net) as the persistent storage.
${symbol_pound} Using this implementation OJB works as a simple OODBMS
${symbol_pound}PersistenceBrokerClass=org.apache.ojb.broker.prevayler.PBPrevaylerImpl
${symbol_pound}
${symbol_pound}
${symbol_pound} This setting can be helpful during development if the PersistenceBroker transaction
${symbol_pound} demarcation was used (this is true in most cases). If set 'true' on PB${symbol_pound}store(...)
${symbol_pound} and PB${symbol_pound}delete(...) methods calls OJB check for active PB-tx and if no active tx is
${symbol_pound} found a error is logged. This can help to avoid store/delete calls without a running
${symbol_pound} PB-tx while development. Default setting is 'false'. (Note: When using OJB in a managed
${symbol_pound} environment *without* OJB-caching, it's valid to use store/delete calls without a running PB-tx)
${symbol_pound} Kuali Foundation Modification
${symbol_pound}TxCheck=false
TxCheck=true
${symbol_pound} End Kuali Foundation Modification
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} PersistenceBroker pool
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} PersistenceBroker pool configuration
${symbol_pound} This pool uses the jakarta-commons-pool api.
${symbol_pound} There you can find things described in detail.
${symbol_pound}
${symbol_pound} maximum number of brokers that can be borrowed from the
${symbol_pound} pool at one time. When non-positive, there is no limit.

${symbol_pound} Kuali Foundation Modification
${symbol_pound}maxActive=100
maxActive=${symbol_dollar}{ojb.persistencebroker.pool.maxactive}
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound} controls the maximum number of brokers that can sit idle in the
${symbol_pound} pool (per key) at any time. When non-positive, there is no limit
maxIdle=-1
${symbol_pound}
${symbol_pound} max time block to get broker instance from pool, after that exception is thrown.
${symbol_pound} When non-positive, block till last judgement
maxWait=2000
${symbol_pound}
${symbol_pound} indicates how long the eviction thread should sleep before "runs" of examining
${symbol_pound} idle objects. When non-positive, no eviction thread will be launched.
timeBetweenEvictionRunsMillis=-1
${symbol_pound}
${symbol_pound} specifies the minimum amount of time that an broker may sit idle
${symbol_pound} in the pool before it is eligable for eviction due to idle time.
${symbol_pound} When non-positive, no object will be dropped from the pool due
${symbol_pound} to idle time alone (depends on timeBetweenEvictionRunsMillis > 0)

${symbol_pound} Kuali Foundation Modification
${symbol_pound}minEvictableIdleTimeMillis=1000000
minEvictableIdleTimeMillis=${symbol_dollar}{datasource.connection.timeout}
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound} specifies the behaviour of the pool when broker capacity is
${symbol_pound} exhausted (see maxActive above)
${symbol_pound} 0 - fail
${symbol_pound} 1 - block
${symbol_pound} 2 - grow
whenExhaustedAction=0
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} ConnectionFactory / Default ConnectionPool
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The ConnectionFactoryClass entry determines which kind of ConnectionFactory
${symbol_pound} is to be used within org.apache.ojb as connection factory.
${symbol_pound} A ConnectionFactory is responsible for creating
${symbol_pound} JDBC Connections. Current version ships four implementations:
${symbol_pound}
${symbol_pound} 1. ConnectionFactoryNotPooledImpl
${symbol_pound}    No pooling, no playing around.
${symbol_pound}    Every connection request returns a new connection,
${symbol_pound}    every connection release close the connection.
${symbol_pound} 2. ConnectionFactoryPooledImpl
${symbol_pound}    This implementation supports connection pooling.
${symbol_pound} 3. ConnectionFactoryDBCPImpl
${symbol_pound}    Using the jakarta-DBCP api for connection management, support
${symbol_pound}    connection- and prepared statement-pooling, abandoned connection handling.
${symbol_pound} 4. ConnectionFactoryManagedImpl
${symbol_pound}    Connection factory for use within managed environments - e.g. JBoss.
${symbol_pound}    Every obtained DataSource was wrapped within OJB (and ignore
${symbol_pound}    e.g. con.commit() calls within OJB).
${symbol_pound}    Use this implementation e.g if you use Datasources from an application server.
${symbol_pound}
${symbol_pound} Use the OJB performance tests to decide, which implementation is best for you.
${symbol_pound} The proper way of obtaining a connection is configured in
${symbol_pound} JDBCConnectionDescriptor entries in the repository.xml file.
${symbol_pound} If want a more fine grained control of each connection pool used by OJB,
${symbol_pound} take a look at the repository.dtd, there was a possibility to override
${symbol_pound} this default connection factory entry in each JDBCConnectionDescriptor.
${symbol_pound}

${symbol_pound} Kuali Foundation Modification
${symbol_pound}ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryPooledImpl
ConnectionFactoryClass=org.kuali.rice.core.ojb.RiceDataSourceConnectionFactory
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryNotPooledImpl
${symbol_pound}ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryDBCPImpl
${symbol_pound} Only needed when using OJB 1.0.3 or earlier in managed environments. Since version
${symbol_pound} 1.0.4 OJB detects datasources from managed environments automatically.
${symbol_pound}ConnectionFactoryClass=org.apache.ojb.broker.accesslayer.ConnectionFactoryManagedImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} ConnectionManager
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The ConnectionManagerClass entry defines the ConnectionManager implemementation to be used
ConnectionManagerClass=org.apache.ojb.broker.accesslayer.ConnectionManagerImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} SqlGenerator
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The SqlGeneratorClass entry defines the SqlGenerator implemementation to be used

${symbol_pound} Kuali Foundation Modification
SqlGeneratorClass=org.kuali.rice.core.ojb.SqlGeneratorSuffixableImpl
${symbol_pound}SqlGeneratorClass=org.apache.ojb.broker.accesslayer.sql.SqlGeneratorDefaultImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} ProxyFactory and IndirectionHandler
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The ProxyFactoryClass entry defines which ProxyFactory implementation is to be used.
${symbol_pound} By default, a 1.0 compatiable, JDK-based version is used. However, a the CGLIB based entry 
${symbol_pound} is available.
${symbol_pound}
${symbol_pound}	- ProxyFactoryCGLIBImpl: Refernece proxies are generated using bytecode manipulation
${symbol_pound}			from the CGLIB library. Any class can become a dynamic proxy, and not just ones
${symbol_pound}			that implement an interface.
${symbol_pound}   - ProxyFactoryJDKImpl: OJB 1.0 compatiable Proxy implementation. Proxies in this method 
${symbol_pound}			can only be generated from classes that implement an interface, and the generated
${symbol_pound}			Proxy will implement all methods of that interface.
${symbol_pound}
${symbol_pound} NOTE: The appropriate cooresponding IndirectionHandler must be choosen as well
${symbol_pound}
${symbol_pound}ProxyFactoryClass=org.apache.ojb.broker.core.proxy.ProxyFactoryCGLIBImpl

${symbol_pound} Kuali Foundation Modification
${symbol_pound}ProxyFactoryClass=org.apache.ojb.broker.core.proxy.ProxyFactoryJDKImpl
ProxyFactoryClass=org.apache.ojb.broker.core.proxy.ProxyFactoryCGLIBImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound} The IndirectionHandlerClass entry defines the class to be used by OJB's proxies to
${symbol_pound} handle method invocations
${symbol_pound}
${symbol_pound}IndirectionHandlerClass=org.apache.ojb.broker.core.proxy.IndirectionHandlerCGLIBImpl

${symbol_pound} Kuali Foundation Modification
${symbol_pound}IndirectionHandlerClass=org.apache.ojb.broker.core.proxy.IndirectionHandlerJDKImpl
IndirectionHandlerClass=org.apache.ojb.broker.core.proxy.IndirectionHandlerCGLIBImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} ListProxy
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The ListProxyClass entry defines the proxy class to be used for collections that
${symbol_pound} implement the java.util.List interface.
${symbol_pound}
ListProxyClass=org.apache.ojb.broker.core.proxy.ListProxyDefaultImpl
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} SetProxy
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The SetProxyClass entry defines the proxy class to be used for collections that
${symbol_pound} implement the java.util.Set interface.
${symbol_pound}
SetProxyClass=org.apache.ojb.broker.core.proxy.SetProxyDefaultImpl
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} CollectionProxy
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The CollectionProxyClass entry defines the proxy class to be used for collections that
${symbol_pound} do not implement java.util.List or java.util.Set.
${symbol_pound}
CollectionProxyClass=org.apache.ojb.broker.core.proxy.CollectionProxyDefaultImpl
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} StatementManager
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The StatementManagerClass entry defines the StatementManager implemementation to be used
StatementManagerClass=org.apache.ojb.broker.accesslayer.StatementManager
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} StatementsForClass
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The StatementsForClassClass entry defines the StatementsForClass implemementation to be used
${symbol_pound} to implement cached statements.
StatementsForClassClass=org.apache.ojb.broker.accesslayer.StatementsForClassImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} JdbcAccess
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The JdbcAccessClass entry defines the JdbcAccess implemementation to be used
JdbcAccessClass=org.apache.ojb.broker.accesslayer.JdbcAccessImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} RowReader
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Set the standard RowReader implementation. It is also possible to specify the
${symbol_pound} RowReader on class-descriptor level.
RowReaderDefaultClass=org.apache.ojb.broker.accesslayer.RowReaderDefaultImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Object cache
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} NOTE: ObjectCacheClass declaration in OJB.properties file was removed (since OJB 1.0.2).
${symbol_pound} The concrete ObjectCache implementation has to specified in the repository file using
${symbol_pound} the 'object-cache' element. See documentation for more detailed info.
${symbol_pound}
${symbol_pound} This property is only relevant if the per class-descriptor object-cache
${symbol_pound} declaration was used in conjunction with metadata runtime changes.
${symbol_pound} If set 'flase' the class name of the object is used
${symbol_pound} to find a per class ObjectCache implementation.
${symbol_pound} If set 'true' the ObjectCacheDescriptor instance is used as key to
${symbol_pound} find a per class ObjectCache, this enables to use different ObjectCache
${symbol_pound} instances for the same class.
descriptorBasedCaches=false
${symbol_pound}
${symbol_pound} NOTE: CacheFilters declaration was removed (since OJB 1.0.2). To exclude
${symbol_pound} object of whole packages from being cache use a specific property in
${symbol_pound} cache declaration - see caching guide in reference docs.
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Locking
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The 'LockManagerClass' specify the internal used LockManager implementation.
${symbol_pound} If OJB is running in distributed environment it is recommended to use the remote
${symbol_pound} lock manager. It guarantees to provide Lockmanagement across multiple JVM's.
${symbol_pound}
${symbol_pound} The deprecated odmg locking implementation. Needs enabled 'LockMapClass' too.
${symbol_pound}@deprecated LockManagerClass=org.apache.ojb.odmg.locking.LockManagerDefaultImpl
${symbol_pound} A servlet based lock implementation for distributed environments, needs enabled
${symbol_pound} property 'LockServletUrl' too.
${symbol_pound}LockManagerClass=org.apache.ojb.broker.locking.LockManagerRemoteImpl
${symbol_pound} Lock manager implementation using apache's commons-transaction locking api
${symbol_pound}LockManagerClass=org.apache.ojb.broker.locking.LockManagerCommonsImpl
LockManagerClass=org.apache.ojb.broker.locking.LockManagerInMemoryImpl
${symbol_pound}
${symbol_pound} The LockServletUrl entry points to the Lockserver servlet.
${symbol_pound} This Servlet is addressed by all distributed JVMs if the RemoteLockMapImpl
${symbol_pound} is used.
${symbol_pound}LockServletUrl=http://127.0.0.1:8080/ojb-lockserver
${symbol_pound}
${symbol_pound} The LockTimeout entry defines the maximum time in milliseconds
${symbol_pound} that a lock may be hold. Defaults to 60000 = 1 minute
LockTimeout=60000
${symbol_pound}
${symbol_pound}
${symbol_pound} ------ deprecated ------
${symbol_pound} The LockMapClass entry tells OJB which concrete LockMap
${symbol_pound} implementation is to be used.
${symbol_pound} If OJB is running on multiple concurrent clients it is recommended
${symbol_pound} to use the LockMapRemoteImpl. It guarantees to provide
${symbol_pound} Lockmanagement across multiple JVMs.
${symbol_pound} This Implemenation relies on a Servlet based Lockserver. To use it you have to
${symbol_pound} deploy the ojb-lockserver.war into a Servlet engine.
${symbol_pound} and you have to set the Property LockServletUrl to point to this servlet.
${symbol_pound} (see LockServletUrl section below).
${symbol_pound} If OJB is running in a single JVM (e.g. in a desktop app, or in a servlet
${symbol_pound} engine) it is save to use the LockMapInMemoryImpl. Using it will result
${symbol_pound} in a large performance gain.
${symbol_pound} These settings are deprecated, only needed in conjunction with the old odmg 'LockManagerClass'
${symbol_pound} @deprecated LockMapClass=org.apache.ojb.odmg.locking.RemoteLockMapImpl
${symbol_pound} @deprecated LockMapClass=org.apache.ojb.odmg.locking.InMemoryLockMapImpl
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} OQL / SQL settings
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The OqlCollectionClass entry defines the collection type returned
${symbol_pound} from OQL queries. By default this value is set to a List.
${symbol_pound} This will be good for most situations. If you need the additional features of
${symbol_pound} DList (DList itself is persistable, support of predicate) comment in the DList
${symbol_pound} implementation. See also section 'ODMG settings' (DListClass entry).
${symbol_pound} Using DLists for large resultsets may be bad for application performance.
${symbol_pound} For these scenarios you can use ArrayLists or Vectors.
${symbol_pound} Important note: the collections class to be used MUST implement the
${symbol_pound} interface 'org.apache.ojb.broker.ManageableCollection'.
${symbol_pound}

${symbol_pound} Kuali Foundation Modification
${symbol_pound}OqlCollectionClass=org.apache.ojb.broker.util.collections.ManageableArrayList
OqlCollectionClass=org.apache.ojb.odmg.collections.DListImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound} OqlCollectionClass=org.apache.ojb.odmg.collections.DListImpl
${symbol_pound} OqlCollectionClass=org.apache.ojb.broker.util.collections.ManageableVector
${symbol_pound}
${symbol_pound} The SqlInLimit entry limits the number of values in IN-sql statement,
${symbol_pound} -1 for no limits. This hint is used in Criteria.
SqlInLimit=200
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} ODMG-api settings
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Specify the used base class for ODMG API
${symbol_pound} - ImplementationDefaultImpl is the default class
${symbol_pound} - ImplementationJTAImpl is for use in managed environments like J2EE conform
${symbol_pound} Application Server
${symbol_pound}

${symbol_pound} Kuali Foundation Modification
${symbol_pound}ImplementationClass=org.apache.ojb.odmg.ImplementationImpl
ImplementationClass=org.apache.ojb.odmg.ImplementationJTAImpl
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}ImplementationClass=org.apache.ojb.odmg.ImplementationJTAImpl
${symbol_pound}
${symbol_pound} Specify the used tx handling.
${symbol_pound} - LocalTxManager use if you want the transaction to be associated by a thread
${symbol_pound} - JTATxManager use if you want the transaction to be associated via the Transaction
${symbol_pound} manager that is in your application server.
${symbol_pound}

${symbol_pound} Kuali Foundation Modification
${symbol_pound}OJBTxManagerClass=org.apache.ojb.odmg.LocalTxManager
OJBTxManagerClass=org.apache.ojb.odmg.JTATxManager
${symbol_pound} End Kuali Foundation Modification

${symbol_pound}OJBTxManagerClass=org.apache.ojb.odmg.JTATxManager
${symbol_pound}
${symbol_pound}
${symbol_pound} The ImplicitLocking entry defines if implicit lock acquisition is
${symbol_pound} to be used. If set to 'true' OJB implicitly locks objects to ODMG
${symbol_pound} transactions after performing OQL queries.
${symbol_pound} Also if implicit locking is used locking objects is recursive, that is
${symbol_pound} associated objects are also locked.
${symbol_pound} If ImplicitLocking is set to 'false', no locks are obtained in OQL
${symbol_pound} queries, lookup objects and there is also no recursive locking.
${symbol_pound} This setting can be changed at runtime using OJB's ODMG extensions.
ImplicitLocking=true
${symbol_pound}ImplicitLocking=false
${symbol_pound}
${symbol_pound} The LockAssociations entry defines the behaviour for the OJB
${symbol_pound} implicit locking feature. If set to WRITE (default) acquiring a write-
${symbol_pound} lock on a given object x implies write locks on all objects associated
${symbol_pound} to x. If set to READ implicit read-locks are acquired.
${symbol_pound} Acquiring a read-lock on x allways results in implicit read-locks
${symbol_pound} on all associated objects (if 'implicit locking' is enabled).
${symbol_pound} This setting can be changed at runtime using OJB's ODMG extensions.
${symbol_pound}LockAssociations=READ
LockAssociations=WRITE
${symbol_pound}
${symbol_pound} Enable/Disable OJB's persistent object ordering algorithm on commit
${symbol_pound} of a transaction. If enabled OJB try to calculate a valid order for
${symbol_pound} all new/modified objects (and referenced objects).
${symbol_pound} If the used databases support 'deferred checks' it's recommended to use this
${symbol_pound} feature and to disable OJB's object ordering.
${symbol_pound} This setting can be changed at runtime using OJB's ODMG extensions.
Ordering=true
${symbol_pound}
${symbol_pound}
${symbol_pound} Used ODMG collection implementation classes
${symbol_pound} (e.g. when do a Implementation${symbol_pound}newDlist() call)
${symbol_pound}
${symbol_pound} org.odmg.DList implementation class
DListClass=org.apache.ojb.odmg.collections.DListImpl
${symbol_pound}
${symbol_pound} org.odmg.DArray implementation class
DArrayClass=org.apache.ojb.odmg.collections.DListImpl
${symbol_pound}
${symbol_pound} org.odmg.DMap implementation class
DMapClass=org.apache.ojb.odmg.collections.DMapImpl
${symbol_pound}
${symbol_pound} org.odmg.DBag implementation class
DBagClass=org.apache.ojb.odmg.collections.DBagImpl
${symbol_pound}
${symbol_pound} org.odmg.DSet implementation class
DSetClass=org.apache.ojb.odmg.collections.DSetImpl
${symbol_pound}
${symbol_pound}
${symbol_pound} @deprecated property for backward compatibility.
${symbol_pound} If set 'true' the behavior of method
${symbol_pound} ImplementationImpl${symbol_pound}setImplicitLocking(...) will be the same as
${symbol_pound} in OJB <=1.0.3 (set the implicit locking behavior of the current used transaction)
${symbol_pound} and disable the new possibility of global 'implicit locking'
${symbol_pound} setting at runtime with ImplementationExt${symbol_pound}setImplicitLocking.
${symbol_pound} This is only for backward compatibility and will
${symbol_pound} be removed at a later date.
ImplicitLockingBackward=false
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Meta data / mapping settings
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} The PersistentFieldClass property defines the implementation class
${symbol_pound} for PersistentField attributes used in the OJB MetaData layer.
${symbol_pound} By default the best performing attribute/refection based implementation
${symbol_pound} is selected (PersistentFieldDirectAccessImpl).
${symbol_pound}
${symbol_pound} - PersistentFieldDirectAccessImpl
${symbol_pound}   is a high-speed version of the access strategies.
${symbol_pound}   It does not cooperate with an AccessController,
${symbol_pound}   but accesses the fields directly. Persistent
${symbol_pound}   attributes don't need getters and setters
${symbol_pound}   and don't have to be declared public or protected
${symbol_pound} - PersistentFieldPrivilegedImpl
${symbol_pound}   Same as above, but does cooperate with AccessController and do not
${symbol_pound}   suppress the java language access check (but is slow compared with direct access).
${symbol_pound} - PersistentFieldIntrospectorImpl
${symbol_pound}   uses JavaBeans compliant calls only to access persistent attributes.
${symbol_pound}   No Reflection is needed. But for each attribute xxx there must be
${symbol_pound}   public getXxx() and setXxx() methods.
${symbol_pound} - PersistentFieldDynaBeanAccessImpl
${symbol_pound}   implementation used to access a property from a
${symbol_pound}   org.apache.commons.beanutils.DynaBean.
${symbol_pound} - PersistentFieldAutoProxyImpl
${symbol_pound}   for each field determines upon first access how to access this particular field
${symbol_pound}   (directly, as a bean, as a dyna bean) and then uses that strategy
${symbol_pound}
PersistentFieldClass=org.apache.ojb.broker.metadata.fieldaccess.PersistentFieldDirectImpl
${symbol_pound}PersistentFieldClass=org.apache.ojb.broker.metadata.fieldaccess.PersistentFieldPrivilegedImpl
${symbol_pound}PersistentFieldClass=org.apache.ojb.broker.metadata.fieldaccess.PersistentFieldIntrospectorImpl
${symbol_pound}PersistentFieldClass=org.apache.ojb.broker.metadata.fieldaccess.PersistentFieldDynaBeanImpl
${symbol_pound}PersistentFieldClass=org.apache.ojb.broker.metadata.fieldaccess.PersistentFieldAutoProxyImpl
${symbol_pound}(DynaBean implementation does not support nested fields)
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Component Intercepting for Profiling and Tracing
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} By enabling an InterceptorClass all OJB components will use
${symbol_pound} this Interceptor. Interceptors allow advanced tracing and Profiling
${symbol_pound} of all component method calls.
${symbol_pound} This is currently an experimental feature useful only for OJB kernel developers.
${symbol_pound}
${symbol_pound}InterceptorClass=org.apache.ojb.broker.util.interceptor.TracingInterceptor
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Transaction Management and assocation
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} (optional, only used when OJB runs within managed environments)
${symbol_pound} To praticipate in JTA transaction OJB needs access to the underlying transaction manager.
${symbol_pound} The TransactionManager is acquired in different ways dependent on the application server.
${symbol_pound} The JTATransactionManagerClass property allows you to specify the class that implements
${symbol_pound} the proper behaviour for finding the transaction manager. Only use when OJBTxManagerClass
${symbol_pound} is set to a factory that uses the application server transaction manager
${symbol_pound} (org.apache.ojb.odmg.JTATxManager)
${symbol_pound}
${symbol_pound} JBoss Transaction Manager Factory

${symbol_pound} Kuali Foundation Modification
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.JBossTransactionManagerFactory
JTATransactionManagerClass=org.kuali.rice.core.ojb.TransactionManagerFactory
${symbol_pound} End Kuali Foundation Modification

${symbol_pound} Weblogic Transaction Manager Factory
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.WeblogicTransactionManagerFactory
${symbol_pound} WebSphere transaction manager factory
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.WebSphereTransactionManagerFactory
${symbol_pound} Orion transaction manager factory
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.OrionTransactionManagerFactory
${symbol_pound} SunOne transaction manager factory
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.SunOneTransactionManagerFactory
${symbol_pound} JOnAs transaction manager factory
${symbol_pound}JTATransactionManagerClass=org.apache.ojb.broker.transaction.tm.JOnASTransactionManagerFactory
${symbol_pound}
${symbol_pound}
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} Logging settings are now in their own file, OJB-logging.properties
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound}----------------------------------------------------------------------------------------
${symbol_pound} End of OJB.properties file
${symbol_pound}----------------------------------------------------------------------------------------
